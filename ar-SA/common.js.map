{"version":3,"file":"common.js","mappings":";;;;;;;;;;;;;;;AAC8D;;;AAS9D;;GAEG;AAEI,MAAM,mBAAmB;IAE9B,YAA6B,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAD7C,SAAI,GAAG,uCAAuC,CAAC;IACC,CAAC;IAEjD;;OAEG;IACH,gBAAgB,CACd,KAA8B;QAE9B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAA8B,GAAG,IAAI,CAAC,IAAI,EAAE,EAAE;YAChE,MAAM,EAAE,IAAI,4DAAU,CAAC,EAAE,UAAU,EAAE,KAAY,EAAE,CAAC;SACrD,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,kBAAkB,CAChB,KAAgC;QAEhC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAe,GAAG,IAAI,CAAC,IAAI,EAAE,EAAE,KAAK,CAAC,CAAC;IAC7D,CAAC;IAED;;;;OAIG;IACH,kBAAkB,CAAC,cAAsB;QACvC,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,IAAI,cAAc,EAAE,CAAC,CAAC;IAC5D,CAAC;;sFA/BU,mBAAmB;oHAAnB,mBAAmB,WAAnB,mBAAmB;;;;;;;;;;;;;;;;;ACb8B;;;AAM9D;;GAEG;AAEI,MAAM,eAAe;IAE1B,YAA6B,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAD7C,SAAI,GAAG,mCAAmC,CAAC;IACK,CAAC;IAEjD;;OAEG;IACH,YAAY,CACV,KAA0B;QAE1B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAA0B,GAAG,IAAI,CAAC,IAAI,EAAE,EAAE;YAC5D,MAAM,EAAE,IAAI,4DAAU,CAAC,EAAE,UAAU,EAAE,KAAY,EAAE,CAAC;SACrD,CAAC,CAAC;IACL,CAAC;;8EAbU,eAAe;gHAAf,eAAe,WAAf,eAAe","sources":["./src/app/shared/services/analysis-management/analysis-type/analysis-type.service.ts","./src/app/shared/services/analysis-management/test-type/test-type.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\nimport { Observable } from \"rxjs/internal/Observable\";\nimport { PagedResponse } from \"src/app/shared/models/shared/paged.response\";\nimport {\n  CreateAnalysisTypeRequest,\n  GetAnalysisTypesRequest,\n} from \"./analysis-type.input\";\nimport { AnalysisType } from \"src/app/shared/models/analysis-management/analysis-type.model\";\n\n/**\n * AnalysisType Service\n */\n@Injectable()\nexport class AnalysisTypeService {\n  path = `v1/analysis-management/analysis-types`;\n  constructor(private readonly http: HttpClient) {}\n\n  /**\n   * Get analysis types\n   */\n  getAnalysisTypes(\n    input: GetAnalysisTypesRequest\n  ): Observable<PagedResponse<AnalysisType>> {\n    return this.http.get<PagedResponse<AnalysisType>>(`${this.path}`, {\n      params: new HttpParams({ fromObject: input as any }),\n    });\n  }\n\n  /**\n   * Create AnalysisType\n   */\n  createAnalysisType(\n    input: CreateAnalysisTypeRequest\n  ): Observable<AnalysisType> {\n    return this.http.post<AnalysisType>(`${this.path}`, input);\n  }\n\n  /**\n   * Delete analysis type\n   * @param analysisTypeId\n   * @returns\n   */\n  deleteAnalysisType(analysisTypeId: string): Observable<Object> {\n    return this.http.delete(`${this.path}/${analysisTypeId}`);\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\nimport { Observable } from \"rxjs/internal/Observable\";\nimport { PagedResponse } from \"src/app/shared/models/shared/paged.response\";\nimport { GetTestTypesRequest } from \"./test-type.input\";\nimport { TestType } from \"src/app/shared/models/analysis-management/test-type.model\";\n\n/**\n * TestType Service\n */\n@Injectable()\nexport class TestTypeService {\n  path = `v1/analysis-management/test-types`;\n  constructor(private readonly http: HttpClient) {}\n\n  /**\n   * Get Test types\n   */\n  getTestTypes(\n    input: GetTestTypesRequest\n  ): Observable<PagedResponse<TestType>> {\n    return this.http.get<PagedResponse<TestType>>(`${this.path}`, {\n      params: new HttpParams({ fromObject: input as any }),\n    });\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///"}