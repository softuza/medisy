{"version":3,"file":"src_app_modules_sample-management_samples_samples_module_ts.js","mappings":"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","sources":["./src/app/modules/sample-management/samples/components/filter/filter.component.ts","./src/app/modules/sample-management/samples/components/filter/filter.component.html","./src/app/modules/sample-management/samples/samples.component.ts","./src/app/modules/sample-management/samples/samples.component.html","./src/app/modules/sample-management/samples/samples.module.ts","./src/app/modules/sample-management/samples/samples.routing.module.ts","./src/app/shared/services/sample-management/sample-type/sample-type.service.ts","./src/app/shared/services/sample-management/samples/samples.service.ts"],"sourcesContent":["import { Component, Inject } from \"@angular/core\";\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\nimport { FormBuilder } from \"@angular/forms\";\nimport { DialogComponent } from \"src/app/shared/components/dialog.component\";\nimport { map } from \"rxjs/operators\";\nimport { SamplesFilter } from \"./samples.filter\";\nimport { Observable } from \"rxjs/internal/Observable\";\nimport { SampleTypeService } from \"src/app/shared/services/sample-management/sample-type/sample-type.service\";\nimport { SampleType } from \"src/app/shared/models/sample-management/sample-type.model\";\n\n@Component({\n  selector: \"app-laboratory-management-samples-filter\",\n  templateUrl: \"./filter.component.html\",\n  providers: [SampleTypeService],\n})\nexport class FilterComponent extends DialogComponent<\n  FilterComponent,\n  SamplesFilter\n> {\n  sampleTypes$: Observable<SampleType[] | null> | null = null;\n\n  /**\n   * Constructor\n   * @param fb\n   * @param dialog\n   * @param data\n   */\n  constructor(\n    private fb: FormBuilder,\n    private dialog: MatDialogRef<FilterComponent>,\n    private sampleTypeService: SampleTypeService,\n    @Inject(MAT_DIALOG_DATA) public data: SamplesFilter\n  ) {\n    super(\n      dialog,\n      fb.group({\n        sampleTypeId: [data.sampleTypeId],\n      })\n    );\n    this.getSampleTypes();\n  }\n\n  /**\n   * Get sample types\n   */\n  private getSampleTypes(): void {\n    this.sampleTypes$ = this.sampleTypeService\n      .getSampleTypes({\n        pageIndex: 1,\n        pageSize: 50,\n        sortBy: \"Name\",\n        sortDescending: false,\n      })\n      .pipe(map((x) => x.items));\n  }\n\n  /**\n   * Submit\n   */\n  override handleSubmit(): void {\n    this.close(this.form.value);\n  }\n}\n","<h2 mat-dialog-title>تصفية النتائج</h2>\n<app-alert *ngIf=\"alert$ | async as alert\" [alert]=\"alert\"></app-alert>\n<mat-dialog-content>\n  <form [formGroup]=\"form\">\n    <div fxLayout=\"row\" fxLayout.lt-md=\"column wrap\" fxLayoutGap=\"8px\">\n      <mat-form-field fxFlex=\"1 1 100%\">\n        <mat-select formControlName=\"sampleTypeId\" placeholder=\"نوع العينة\">\n          <mat-option>-</mat-option>\n          <mat-option\n            *ngFor=\"let item of sampleTypes$ | async\"\n            [value]=\"item.id\"\n            >{{ item.name }}</mat-option\n          >\n        </mat-select>\n      </mat-form-field>\n    </div>\n  </form>\n</mat-dialog-content>\n<mat-dialog-actions class=\"mat-dialog-actions-end\">\n  <button (click)=\"close()\" mat-button>إغلاق</button>\n  <button\n    (click)=\"submit()\"\n    mat-flat-button\n    color=\"primary\"\n    [disabled]=\"indicator$ | async\"\n  >\n    حفظ\n  </button>\n</mat-dialog-actions>\n","import { Component } from \"@angular/core\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { indicate } from \"src/app/shared/operators/operators\";\nimport { take } from \"rxjs/operators\";\nimport { TableComponent } from \"src/app/shared/components/table.component\";\nimport { Sample } from \"src/app/shared/models/sample-management/sample.model\";\nimport { SampleService } from \"src/app/shared/services/sample-management/samples/samples.service\";\nimport { GetSamplesRequest } from \"src/app/shared/services/sample-management/samples/samples.input\";\nimport { SamplesFilter } from \"./components/filter/samples.filter\";\nimport { FilterComponent } from \"./components/filter/filter.component\";\n\n@Component({\n  selector: \"app-sample-management-samples\",\n  templateUrl: \"./samples.component.html\",\n  styleUrls: [\"samples.component.scss\"],\n})\nexport class SamplesComponent extends TableComponent<Sample> {\n  displayedColumns = [\"menu\"];\n  override filter: SamplesFilter = {};\n\n  /**\n   * Constructor\n   * @param dialog\n   * @param sampleService\n   */\n  constructor(private dialog: MatDialog, private sampleService: SampleService) {\n    super();\n    this.get();\n  }\n\n  /**\n   * Open filter component\n   */\n  openFilterComponent(): void {\n    const ref = this.dialog.open(FilterComponent, {\n      autoFocus: true,\n      width: \"480px\",\n      data: this.filter,\n    });\n    ref\n      .afterClosed()\n      .pipe(take(1))\n      .subscribe((filter) => {\n        if (filter) {\n          this.filter = filter;\n          this.get();\n        }\n      });\n  }\n\n  /**\n   * Get\n   */\n  get(): void {\n    const input: GetSamplesRequest = {\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      sortBy: this.sortBy,\n      sortDescending: this.sortDescending,\n    };\n    if (this.filter.sampleTypeId) {\n      input.sampleTypeId = this.filter.sampleTypeId;\n    }\n    this.sampleService\n      .getSamples(input)\n      .pipe(indicate(this.indicator$))\n      .pipe(take(1))\n      .subscribe((res) => {\n        this.set(res.count, res.items);\n      });\n  }\n}\n","<div>\n  <div class=\"header-basic\">\n    <span class=\"title\">العينات</span>\n    <span class=\"spacer\"></span>\n    <button (click)=\"search = true\" mat-icon-button>\n      <mat-icon>search</mat-icon>\n    </button>\n\n    <button\n      mat-icon-button\n      (click)=\"openFilterComponent()\"\n      matBadge=\"{{ getFilterCount() }}\"\n      matBadgeSize=\"small\"\n    >\n      <mat-icon>filter_list</mat-icon>\n    </button>\n\n    <app-search-bar\n      (changed)=\"onSearch($event)\"\n      (closed)=\"onSearchClose()\"\n      [visible]=\"search\"\n    ></app-search-bar>\n  </div>\n\n  <app-table-selection [visible]=\"selection.hasValue()\">\n    <span>{{ selection.selected.length }} selected</span>\n    <span class=\"spacer\"></span>\n  </app-table-selection>\n  <mat-table\n    [dataSource]=\"dataSource\"\n    multiTemplateDataRows\n    matSort\n    matSortActive=\"{{ sortBy }}\"\n    matSortDisableClear\n    matSortDirection=\"desc\"\n    (matSortChange)=\"onSort($event.active, $event.direction)\"\n  >\n    <ng-container matColumnDef=\"select\">\n      <mat-header-cell *matHeaderCellDef class=\"table-column-small\">\n        <mat-checkbox\n          (change)=\"$event ? masterToggle() : null\"\n          [checked]=\"selection.hasValue() && isAllSelected()\"\n          [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n        >\n        </mat-checkbox>\n      </mat-header-cell>\n      <mat-cell *matCellDef=\"let row\" class=\"table-column-small\">\n        <mat-checkbox\n          (click)=\"$event.stopPropagation()\"\n          (change)=\"$event ? selection.toggle(row) : null\"\n          [checked]=\"selection.isSelected(row)\"\n        >\n        </mat-checkbox>\n      </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"expandedDetail\">\n      <mat-cell\n        *matCellDef=\"let element\"\n        [attr.colspan]=\"displayedColumns.length\"\n      >\n        <div\n          [@detailExpand]=\"\n            element === expandedElement ? 'expanded' : 'collapsed'\n          \"\n        >\n          <div>\n            {{ element.description }}\n          </div>\n        </div>\n      </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"id\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> #</mat-header-cell>\n      <mat-cell *matCellDef=\"let element\"> {{ element.id }} </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"name\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header>\n        الاسم</mat-header-cell\n      >\n      <mat-cell *matCellDef=\"let element\">\n        <div class=\"table-cell-stacked\">\n          <div>\n            <strong> {{ element.name }} </strong>\n          </div>\n        </div>\n      </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"menu\">\n      <mat-header-cell\n        *matHeaderCellDef\n        class=\"table-column-small\"\n      ></mat-header-cell>\n      <mat-cell\n        *matCellDef=\"let element\"\n        class=\"table-column-small table-column-end\"\n      >\n        <button\n          mat-icon-button\n          (click)=\"\n            expandedElement = expandedElement === element ? null : element\n          \"\n          *ngIf=\"false\"\n        >\n          <mat-icon>{{\n            expandedElement === element ? \"expand_less\" : \"expand_more\"\n          }}</mat-icon>\n        </button>\n        <button [matMenuTriggerFor]=\"itemMenu\" mat-icon-button>\n          <mat-icon>more_vert</mat-icon>\n        </button>\n        <mat-menu #itemMenu=\"matMenu\"> </mat-menu>\n      </mat-cell>\n    </ng-container>\n\n    <mat-header-row\n      *matHeaderRowDef=\"displayedColumns; sticky: true\"\n    ></mat-header-row>\n    <mat-row *matRowDef=\"let row; columns: displayedColumns\"></mat-row>\n  </mat-table>\n  <app-table-state\n    *ngIf=\"count === 0\"\n    [loading]=\"indicator$ | async\"\n  ></app-table-state>\n  <mat-paginator\n    [length]=\"count\"\n    *ngIf=\"count > 0\"\n    [pageSize]=\"pageSize\"\n    [pageSizeOptions]=\"[10, 25, 50, 100]\"\n    (page)=\"onPageChange($event.pageIndex, $event.pageSize)\"\n    showFirstLastButtons\n  ></mat-paginator>\n</div>\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { AlertModule } from \"src/app/shared/modules/alert/alert.module\";\nimport { MatDialogModule } from \"@angular/material/dialog\";\nimport { MatAutocompleteModule } from \"@angular/material/autocomplete\";\nimport { MatTableModule } from \"@angular/material/table\";\nimport { MatPaginatorModule } from \"@angular/material/paginator\";\nimport { TableModule } from \"src/app/shared/modules/table/table.module\";\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\nimport { MatSelectModule } from \"@angular/material/select\";\nimport { ReactiveFormsModule, FormsModule } from \"@angular/forms\";\nimport { MatStepperModule } from \"@angular/material/stepper\";\nimport { MatMenuModule } from \"@angular/material/menu\";\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\nimport { MatListModule } from \"@angular/material/list\";\nimport { MatSortModule } from \"@angular/material/sort\";\nimport { MatNativeDateModule } from \"@angular/material/core\";\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { SamplesRoutingModule } from \"./samples.routing.module\";\nimport { SamplesComponent } from \"./samples.component\";\nimport { SampleService } from \"src/app/shared/services/sample-management/samples/samples.service\";\nimport { FilterComponent } from \"./components/filter/filter.component\";\nimport { MatBadgeModule } from \"@angular/material/badge\";\nimport { SearchBarModule } from \"src/app/shared/modules/search-bar/search-bar.module\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SamplesRoutingModule,\n    MatDialogModule,\n    MatAutocompleteModule,\n    FlexLayoutModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatInputModule,\n    TableModule,\n    SearchBarModule,\n    AlertModule,\n    MatCheckboxModule,\n    MatMenuModule,\n    MatIconModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatStepperModule,\n    MatTooltipModule,\n    MatListModule,\n    MatSortModule,\n    MatNativeDateModule,\n    MatCardModule,\n    MatBadgeModule,\n    MatProgressSpinnerModule,\n  ],\n  declarations: [SamplesComponent, FilterComponent],\n  providers: [SampleService],\n})\nexport class SamplesModule {}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { SamplesComponent } from \"./samples.component\";\n\nconst routes: Routes = [{ path: \"\", component: SamplesComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SamplesRoutingModule {}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\nimport { Observable } from \"rxjs/internal/Observable\";\nimport { PagedResponse } from \"src/app/shared/models/shared/paged.response\";\nimport { GetSampleTypesRequest } from \"./sample-type.input\";\nimport { SampleType } from \"src/app/shared/models/sample-management/sample-type.model\";\n\n/**\n * SampleType Service\n */\n@Injectable()\nexport class SampleTypeService {\n  path = `v1/sample-management/sample-Types`;\n  constructor(private readonly http: HttpClient) {}\n\n  /**\n   * Get SampleTypes\n   */\n  getSampleTypes(\n    input: GetSampleTypesRequest\n  ): Observable<PagedResponse<SampleType>> {\n    return this.http.get<PagedResponse<SampleType>>(`${this.path}`, {\n      params: new HttpParams({ fromObject: input as any }),\n    });\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\nimport { Observable } from \"rxjs/internal/Observable\";\nimport { Sample } from \"src/app/shared/models/sample-management/sample.model\";\nimport { PagedResponse } from \"src/app/shared/models/shared/paged.response\";\nimport {\n  CreateSampleRequest,\n  GetSamplesRequest,\n  GetSamplesCountRequest,\n} from \"./samples.input\";\nimport { CountResponse } from \"src/app/shared/models/shared/count.response\";\n\n/**\n * Anlysis Service\n */\n@Injectable()\nexport class SampleService {\n  path = `v1/sample-management/samples`;\n  constructor(private readonly http: HttpClient) {}\n\n  /**\n   * Get samples\n   */\n  getSamples(input: GetSamplesRequest): Observable<PagedResponse<Sample>> {\n    return this.http.get<PagedResponse<Sample>>(`${this.path}`, {\n      params: new HttpParams({ fromObject: input as any }),\n    });\n  }\n\n  /**\n   * Get samples count\n   */\n  getSamplesCount(input: GetSamplesCountRequest): Observable<CountResponse> {\n    return this.http.get<CountResponse>(`${this.path}/count`, {\n      params: new HttpParams({ fromObject: input as any }),\n    });\n  }\n\n  /**\n   * Get Sample\n   */\n  getSample(SampleId: string): Observable<Sample> {\n    return this.http.get<Sample>(`${this.path}/${SampleId}`);\n  }\n\n  /**\n   * Create Sample\n   */\n  createSample(input: CreateSampleRequest): Observable<Sample> {\n    return this.http.post<Sample>(`${this.path}`, input);\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///"}